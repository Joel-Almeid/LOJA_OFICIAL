import tkinter as tk
from tkinter import messagebox
import mysql.connector

# Configuração da conexão com o banco de dados
db_config = {
    'user': 'root',
    'password': '',
    'host': 'localhost',
    'database': 'solocampo'
}

# Função para validar CPF
def valida(cpf):
    return len(cpf) == 11

class Usuario:
    def __init__(self, nome, apelido, senha, rg, cpf, telefone):
        self.nome = nome
        self.apelido = apelido
        self.senha = senha
        self.email = f"{nome}.{apelido}@gmail.com"
        self.rg = rg
        self.cpf = cpf
        self.telefone = telefone

    def alterar_senha(self, nova_senha):
        self.senha = nova_senha
        messagebox.showinfo("Sucesso", "Senha alterada com sucesso!")

class Cliente(Usuario):
    def __init__(self, nome, rg, cpf, telefone, apelido, senha, endereco):
        super().__init__(nome, apelido, senha, rg, cpf, telefone)
        self.endereco = endereco

    def alterar_endereco(self, novo_endereco):
        self.endereco = novo_endereco
        messagebox.showinfo("Sucesso", "Endereço alterado com sucesso!")

    def salvar_bd(self):
        try:
            conn = mysql.connector.connect(**db_config)
            cursor = conn.cursor()
            cursor.execute("INSERT INTO clientes (nome, rg, cpf, telefone, apelido, senha, endereco) VALUES (%s, %s, %s, %s, %s, %s, %s)",
                           (self.nome, self.rg, self.cpf, self.telefone, self.apelido, self.senha, self.endereco))
            conn.commit()
            cursor.close()
            conn.close()
            messagebox.showinfo("Sucesso", "Cliente cadastrado com sucesso no banco de dados!")
        except mysql.connector.Error as err:
            messagebox.showerror("Erro", f"Erro ao conectar ao banco de dados: {err}")

class Funcionario(Usuario):
    def __init__(self, nome, apelido, senha, cargo, rg, cpf, telefone):
        super().__init__(nome, apelido, senha, rg, cpf, telefone)
        self.cargo = cargo

    def salvar_bd(self):
        try:
            conn = mysql.connector.connect(**db_config)
            cursor = conn.cursor()
            cursor.execute("INSERT INTO funcionarios (nome, apelido, senha, cargo, rg, cpf, telefone) VALUES (%s, %s, %s, %s, %s, %s, %s)",
                           (self.nome, self.apelido, self.senha, self.cargo, self.rg, self.cpf, self.telefone))
            conn.commit()
            cursor.close()
            conn.close()
            messagebox.showinfo("Sucesso", "Funcionário cadastrado com sucesso no banco de dados!")
        except mysql.connector.Error as err:
            messagebox.showerror("Erro", f"Erro ao conectar ao banco de dados: {err}")

class Produto:
    def __init__(self, id_produto, nome, preco, descricao, tipo, marca, categoria, quantidade):
        self.id_produto = id_produto
        self.nome = nome
        self.preco = preco
        self.descricao = descricao
        self.tipo = tipo
        self.marca = marca
        self.categoria = categoria
        self.quantidade = quantidade

    def exibir_detalhes(self):
        return f"Produto: {self.nome}, Preço: R${self.preco:.2f}, Quantidade disponível: {self.quantidade}, Descrição: {self.descricao}, Id produto: {self.id_produto}"

    def salvar_bd(self):
        try:
            conn = mysql.connector.connect(**db_config)
            cursor = conn.cursor()
            cursor.execute("INSERT INTO produtos (id_produto, nome, preco, descricao, tipo, marca, categoria, quantidade) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)",
                           (self.id_produto, self.nome, self.preco, self.descricao, self.tipo, self.marca, self.categoria, self.quantidade))
            conn.commit()
            cursor.close()
            conn.close()
            messagebox.showinfo("Sucesso", "Produto cadastrado com sucesso no banco de dados!")
        except mysql.connector.Error as err:
            messagebox.showerror("Erro", f"Erro ao conectar ao banco de dados: {err}")

    @staticmethod
    def listar_produtos():
        try:
            conn = mysql.connector.connect(**db_config)
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM produtos")
            produtos = cursor.fetchall()
            cursor.close()
            conn.close()
            return produtos
        except mysql.connector.Error as err:
            messagebox.showerror("Erro", f"Erro ao conectar ao banco de dados: {err}")
            return []

    @staticmethod
    def excluir_produto(nome):
        try:
            conn = mysql.connector.connect(**db_config)
            cursor = conn.cursor()
            cursor.execute("DELETE FROM produtos WHERE nome = %s", (nome,))
            conn.commit()
            cursor.close()
            conn.close()
            messagebox.showinfo("Sucesso", f"Produto {nome} excluído com sucesso do banco de dados!")
        except mysql.connector.Error as err:
            messagebox.showerror("Erro", f"Erro ao conectar ao banco de dados: {err}")

class Pedido:
    def __init__(self):
        self.produtos = []
        self.valor_total = 0
        self.forma_pagamento = None

    def adicionar_produto(self, produto, quantidade):
        if produto.quantidade >= quantidade:
            self.produtos.append((produto, quantidade))
            self.valor_total += produto.preco * quantidade
            produto.quantidade -= quantidade
            messagebox.showinfo("Produto Adicionado",
                                f"{quantidade} unidade(s) do produto {produto.nome} adicionado(s) ao pedido. Valor total: R${self.valor_total:.2f}\nQuantidade restante do produto {produto.nome}: {produto.quantidade}")
        else:
            messagebox.showwarning("Quantidade Insuficiente",
                                   f"Quantidade insuficiente do produto {produto.nome}. Disponível: {produto.quantidade}")

    def selecionar_forma_pagamento(self, forma):
        self.forma_pagamento = forma

    def realizar_pagamento(self):
        if not self.produtos or not self.forma_pagamento:
            messagebox.showwarning("Erro",
                                   "Por favor, adicione produtos ao pedido e selecione a forma de pagamento antes de realizar o pagamento.")
        else:
            messagebox.showinfo("Pagamento", f"Realizando pagamento via {self.forma_pagamento}...")
            messagebox.showinfo("Sucesso", f"Pagamento de R${self.valor_total:.2f} realizado com sucesso!")
            self.produtos.clear()
            self.valor_total = 0
            self.forma_pagamento = None

clientes = []
funcionarios = []
produtos = []

class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("WEB TECHNOMUSIC")
        self.geometry("500x500")
        self.usuario_logado = None
        self.pedido_atual = None
        self.create_widgets()

    def clear_widgets(self):
        # Lista todos os widgets presentes na janela
        for widget in self.winfo_children():
            # Remove cada widget
            widget.destroy()

    def voltar_menu_inicial(self):
        pass

    def create_widgets(self):
        tk.Label(self, text="Bem-vindo à WEB TECHNOMUSIC!").pack(pady=10)
        tk.Button(self, text="Login", command=self.tela_login).pack(pady=5)
        tk.Button(self, text="Cadastrar Funcionário", command=self.tela_cadastro_funcionario).pack(pady=5)
        tk.Button(self, text="Cadastrar Cliente", command=self.tela_cadastro_cliente).pack(pady=5)
        tk.Button(self, text="Buscar Produto", command=self.tela_buscar_produto).pack(pady=5)
        tk.Button(self, text="Listar Produtos", command=self.tela_listar_produtos).pack(pady=5)
        tk.Button(self, text="Sair", command=self.quit).pack(pady=5)

    def tela_login(self):
        self.clear_widgets()
        tk.Label(self, text="Login").pack(pady=10)
        tk.Label(self, text="Apelido").pack()
        apelido_entry = tk.Entry(self)
        apelido_entry.pack()
        tk.Label(self, text="Senha").pack()
        senha_entry = tk.Entry(self, show='*')
        senha_entry.pack()
        tk.Button(self, text="Login", command=lambda: self.fazer_login(apelido_entry.get(), senha_entry.get())).pack(pady=5)
        tk.Button(self, text="Voltar", command=self.voltar_menu_inicial).pack(pady=5)

    def fazer_login(self, apelido, senha):
        try:
            conn = mysql.connector.connect(**db_config)
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM clientes WHERE apelido = %s AND senha = %s", (apelido, senha))
            cliente = cursor.fetchone()
            if cliente:
                self.usuario_logado = Cliente(*cliente[1:])
                messagebox.showinfo("Sucesso", f"Bem-vindo, {self.usuario_logado.nome}!")
                self.tela_principal_cliente()
            else:
                cursor.execute("SELECT * FROM funcionarios WHERE apelido = %s AND senha = %s", (apelido, senha))
                funcionario = cursor.fetchone()
                if funcionario:
                    self.usuario_logado = Funcionario(*funcionario[1:])
                    messagebox.showinfo("Sucesso", f"Bem-vindo, {self.usuario_logado.nome}!")
                    self.tela_principal_funcionario()
                else:
                    messagebox.showerror("Erro", "Apelido ou senha incorretos!")
            cursor.close()
            conn.close()
        except mysql.connector.Error as err:
            messagebox.showerror("Erro", f"Erro ao conectar ao banco de dados: {err}")

    def tela_cadastro_funcionario(self):
        self.clear_widgets()
        tk.Label(self, text="Cadastrar Funcionário").pack(pady=10)
        campos = ["Nome", "Apelido", "Senha", "Cargo", "RG", "CPF", "Telefone"]
        entradas = {}
        for campo in campos:
            tk.Label(self, text=campo).pack()
            entradas[campo] = tk.Entry(self)
            entradas[campo].pack()
        tk.Button(self, text="Cadastrar", command=lambda: self.cadastrar_funcionario(entradas)).pack(pady=5)
        tk.Button(self, text="Voltar", command=self.voltar_menu_inicial).pack(pady=5)

    def cadastrar_funcionario(self, entradas):
        nome = entradas["Nome"].get()
        apelido = entradas["Apelido"].get()
        senha = entradas["Senha"].get()
        cargo = entradas["Cargo"].get()
        rg = entradas["RG"].get()
        cpf = entradas["CPF"].get()
        telefone = entradas["Telefone"].get()
        if valida(cpf):
            funcionario = Funcionario(nome, apelido, senha, cargo, rg, cpf, telefone)
            funcionario.salvar_bd()
        else:
            messagebox.showerror("Erro", "CPF inválido!")

    def tela_cadastro_cliente(self):
        self.clear_widgets()
        tk.Label(self, text="Cadastrar Cliente").pack(pady=10)
        campos = ["Nome", "Apelido", "Senha", "Endereço", "RG", "CPF", "Telefone"]
        entradas = {}
        for campo in campos:
            tk.Label(self, text=campo).pack()
            entradas[campo] = tk.Entry(self)
            entradas[campo].pack()
        tk.Button(self, text="Cadastrar", command=lambda: self.cadastrar_cliente(entradas)).pack(pady=5)
        tk.Button(self, text="Voltar", command=self.voltar_menu_inicial).pack(pady=5)

    def cadastrar_cliente(self, entradas):
        nome = entradas["Nome"].get()
        apelido = entradas["Apelido"].get()
        senha = entradas["Senha"].get()
        endereco = entradas["Endereço"].get()
        rg = entradas["RG"].get()
        cpf = entradas["CPF"].get()
        telefone = entradas["Telefone"].get()
        if valida(cpf):
            cliente = Cliente(nome, rg, cpf, telefone, apelido, senha, endereco)
            cliente.salvar_bd()
        else:
            messagebox.showerror("Erro", "CPF inválido!")

    def tela_principal_cliente(self):
        self.clear_widgets()
        tk.Label(self, text=f"Bem-vindo, {self.usuario_logado.nome}").pack(pady=10)
        tk.Button(self, text="Alterar Endereço", command=self.tela_alterar_endereco).pack(pady=5)
        tk.Button(self, text="Realizar Pedido", command=self.tela_realizar_pedido).pack(pady=5)
        tk.Button(self, text="Logout", command=self.logout).pack(pady=5)

    def tela_principal_funcionario(self):
        self.clear_widgets()
        tk.Label(self, text=f"Bem-vindo, {self.usuario_logado.nome}").pack(pady=10)
        tk.Button(self, text="Cadastrar Produto", command=self.tela_cadastro_produto).pack(pady=5)
        tk.Button(self, text="Listar Produtos", command=self.tela_listar_produtos).pack(pady=5)
        tk.Button(self, text="Excluir Produto", command=self.tela_excluir_produto).pack(pady=5)
        tk.Button(self, text="Logout", command=self.logout).pack(pady=5)

    def tela_cadastro_produto(self):
        self.clear_widgets()
        tk.Label(self, text="Cadastrar Produto").pack(pady=10)
        campos = ["ID Produto", "Nome", "Preço", "Descrição", "Tipo", "Marca", "Categoria", "Quantidade"]
        entradas = {}
        for campo in campos:
            tk.Label(self, text=campo).pack()
            entradas[campo] = tk.Entry(self)
            entradas[campo].pack()
        tk.Button(self, text="Cadastrar", command=lambda: self.cadastrar_produto(entradas)).pack(pady=5)
        tk.Button(self, text="Voltar", command=self.voltar_menu_funcionario).pack(pady=5)

    def cadastrar_produto(self, entradas):
        id_produto = entradas["ID Produto"].get()
        nome = entradas["Nome"].get()
        preco = float(entradas["Preço"].get())
        descricao = entradas["Descrição"].get()
        tipo = entradas["Tipo"].get()
        marca = entradas["Marca"].get()
        categoria = entradas["Categoria"].get()
        quantidade = int(entradas["Quantidade"].get())
        produto = Produto(id_produto, nome, preco, descricao, tipo, marca, categoria, quantidade)
        produto.salvar_bd()

    def tela_buscar_produto(self):
        self.clear_widgets()
        tk.Label(self, text="Buscar Produto").pack(pady=10)
        tk.Label(self, text="Nome do Produto").pack()
        nome_entry = tk.Entry(self)
        nome_entry.pack()
        tk.Button(self, text="Buscar", command=lambda: self.buscar_produto(nome_entry.get())).pack(pady=5)
        tk.Button(self, text="Voltar", command=self.voltar_menu_inicial).pack(pady=5)

    def buscar_produto(self, nome):
        for produto in produtos:
            if produto.nome == nome:
                messagebox.showinfo("Detalhes do Produto", produto.exibir_detalhes())
                return
        messagebox.showerror("Erro", "Produto não encontrado!")

    def tela_listar_produtos(self):
        self.clear_widgets()
        tk.Label(self, text="Produtos Disponíveis").pack(pady=10)
        produtos_bd = Produto.listar_produtos()
        for produto in produtos_bd:
            tk.Label(self, text=f"ID: {produto[0]}, Nome: {produto[1]}, Preço: R${produto[2]:.2f}, Quantidade: {produto[7]}").pack()
        tk.Button(self, text="Voltar", command=self.voltar_menu_funcionario).pack(pady=5)

    def tela_excluir_produto(self):
        self.clear_widgets()
        tk.Label(self, text="Excluir Produto").pack(pady=10)
        tk.Label(self, text="Nome do Produto").pack()
        nome_entry = tk.Entry(self)
        nome_entry.pack()
        tk.Button(self, text="Excluir", command=lambda: self.excluir_produto(nome_entry.get())).pack(pady=5)
        tk.Button(self, text="Voltar", command=self.voltar_menu_funcionario).pack(pady=5)

    def excluir_produto(self, nome):
        Produto.excluir_produto(nome)

    def tela_alterar_endereco(self):
        self.clear_widgets()
        tk.Label(self, text="Alterar Endereço").pack(pady=10)
        tk.Label(self, text="Novo Endereço").pack()
        novo_endereco_entry = tk.Entry(self)
        novo_endereco_entry.pack()
        tk.Button(self, text="Alterar", command=lambda: self.alterar_endereco(novo_endereco_entry.get())).pack(pady=5)
        tk.Button(self, text="Voltar", command=self.tela_principal_cliente).pack(pady=5)

    def alterar_endereco(self, novo_endereco):
        self.usuario_logado.alterar_endereco(novo_endereco)

    def tela_realizar_pedido(self):
        self.clear_widgets()
        tk.Label(self, text="Realizar Pedido").pack(pady=10)
        tk.Button(self, text="Adicionar Produto", command=self.tela_adicionar_produto_pedido).pack(pady=5)
        tk.Button(self, text="Selecionar Forma de Pagamento", command=self.tela_selecionar_forma_pagamento).pack(pady=5)
        tk.Button(self, text="Realizar Pagamento", command=self.realizar_pagamento).pack(pady=5)
        tk.Button(self, text="Voltar", command=self.tela_principal_cliente).pack(pady=5)
        self.pedido_atual = Pedido()

    def tela_adicionar_produto_pedido(self):
        self.clear_widgets()
        tk.Label(self, text="Adicionar Produto ao Pedido").pack(pady=10)
        tk.Label(self, text="Nome do Produto").pack()
        nome_entry = tk.Entry(self)
        nome_entry.pack()
        tk.Label(self, text="Quantidade").pack()
        quantidade_entry = tk.Entry(self)
        quantidade_entry.pack()
        tk.Button(self, text="Adicionar", command=lambda: self.adicionar_produto_pedido(nome_entry.get(), quantidade_entry.get())).pack(pady=5)
        tk.Button(self, text="Voltar", command=self.tela_realizar_pedido).pack(pady=5)

    def adicionar_produto_pedido(self, nome, quantidade):
        for produto in produtos:
            if produto.nome == nome:
                self.pedido_atual.adicionar_item(produto, int(quantidade))
                messagebox.showinfo("Sucesso", f"Produto {nome} adicionado ao pedido!")
                return
        messagebox.showerror("Erro", "Produto não encontrado!")

    def tela_selecionar_forma_pagamento(self):
        self.clear_widgets()
        tk.Label(self, text="Selecionar Forma de Pagamento").pack(pady=10)
        formas_pagamento = ["Cartão de Crédito", "Boleto", "PIX"]
        self.forma_pagamento_var = tk.StringVar(value=formas_pagamento[0])
        for forma in formas_pagamento:
            tk.Radiobutton(self, text=forma, variable=self.forma_pagamento_var, value=forma).pack(anchor=tk.W)
        tk.Button(self, text="Selecionar", command=self.selecionar_forma_pagamento).pack(pady=5)
        tk.Button(self, text="Voltar", command=self.tela_realizar_pedido).pack(pady=5)

    def selecionar_forma_pagamento(self):
        forma_pagamento = self.forma_pagamento_var.get()
        self.pedido_atual.forma_pagamento = forma_pagamento
        messagebox.showinfo("Sucesso", f"Forma de pagamento {forma_pagamento} selecionada!")

    def realizar_pagamento(self):
        if self.pedido_atual.itens:
            self.pedido_atual.cliente = self.usuario_logado
            self.pedido_atual.data = datetime.datetime.now()
            self.pedido_atual.realizar_pagamento()
        else:
            messagebox.showerror("Erro", "Adicione itens ao pedido antes de realizar o pagamento!")

    def logout(self):
        self.usuario_logado = None
        self.voltar_menu_inicial()

    def voltar_menu_inicial(self):
        self.clear_widgets()
        self.__init__()

    def voltar_menu_funcionario(self):
        self.clear_widgets()
        self.tela_principal_funcionario()


if __name__ == "__main__":
    app = App()
    app.mainloop()
