import tkinter as tk
from tkinter import messagebox
import mysql.connector

# Função para validar CPF
def valida(cpf):
    return len(cpf) == 11

# Conexão com o banco de dados MySQL
def conectar_bd():
    return mysql.connector.connect(
        host="localhost",  # Altere para o endereço do seu servidor MySQL
        user="root",  # Altere para o seu usuário MySQL
        password="",  # Altere para a sua senha MySQL
        database="loja"
    )

class Usuario:
    def __init__(self, nome, apelido, senha, rg, cpf, telefone):
        self.nome = nome
        self.apelido = apelido
        self.senha = senha
        self.email = f"{nome}.{apelido}@gmail.com"
        self.rg = rg
        self.cpf = cpf
        self.telefone = telefone

    def alterar_senha(self, nova_senha):
        self.senha = nova_senha
        con = conectar_bd()
        cursor = con.cursor()
        cursor.execute("UPDATE clientes SET senha = %s WHERE cpf = %s", (nova_senha, self.cpf))
        con.commit()
        con.close()
        messagebox.showinfo("Sucesso", "Senha alterada com sucesso!")

class Cliente(Usuario):
    def __init__(self, nome, rg, cpf, telefone, apelido, senha, endereco):
        super().__init__(nome, apelido, senha, rg, cpf, telefone)
        self.endereco = endereco

    def alterar_endereco(self, novo_endereco):
        self.endereco = novo_endereco
        con = conectar_bd()
        cursor = con.cursor()
        cursor.execute("UPDATE clientes SET endereco = %s WHERE cpf = %s", (novo_endereco, self.cpf))
        con.commit()
        con.close()
        messagebox.showinfo("Sucesso", "Endereço alterado com sucesso!")

class Funcionario(Usuario):
    def __init__(self, nome, apelido, senha, cargo, rg, cpf, telefone):
        super().__init__(nome, apelido, senha, rg, cpf, telefone)
        self.cargo = cargo

class Produto:
    def __init__(self, id_produto, nome, preco, descricao, tipo, marca, categoria, quantidade):
        self.id_produto = id_produto
        self.nome = nome
        self.preco = preco
        self.descricao = descricao
        self.tipo = tipo
        self.marca = marca
        self.categoria = categoria
        self.quantidade = quantidade

    def exibir_detalhes(self):
        return f"Produto: {self.nome}, Preço: R${self.preco:.2f}, Quantidade disponível: {self.quantidade}, Descrição: {self.descricao}"

class Pedido:
    def __init__(self):
        self.produtos = []
        self.valor_total = 0
        self.forma_pagamento = None

    def adicionar_produto(self, produto, quantidade):
        if produto.quantidade >= quantidade:
            self.produtos.append((produto, quantidade))
            self.valor_total += produto.preco * quantidade
            produto.quantidade -= quantidade
            messagebox.showinfo("Produto Adicionado", f"{quantidade} unidade(s) do produto {produto.nome} adicionado(s) ao pedido. Valor total: R${self.valor_total:.2f}\nQuantidade restante do produto {produto.nome}: {produto.quantidade}")
        else:
            messagebox.showwarning("Quantidade Insuficiente", f"Quantidade insuficiente do produto {produto.nome}. Disponível: {produto.quantidade}")

    def selecionar_forma_pagamento(self, forma):
        self.forma_pagamento = forma

    def realizar_pagamento(self):
        if not self.produtos or not self.forma_pagamento:
            messagebox.showwarning("Erro", "Por favor, adicione produtos ao pedido e selecione a forma de pagamento antes de realizar o pagamento.")
        else:
            messagebox.showinfo("Pagamento", f"Realizando pagamento via {self.forma_pagamento}...")
            messagebox.showinfo("Sucesso", f"Pagamento de R${self.valor_total:.2f} realizado com sucesso!")
            self.produtos.clear()
            self.valor_total = 0
            self.forma_pagamento = None

class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("WEB TECHNOMUSIC")
        self.geometry("500x500")
        self.usuario_logado = None
        self.pedido_atual = None
        self.create_widgets()

    def clear_widgets(self):
        # Lista todos os widgets presentes na janela
        for widget in self.winfo_children():
            # Remove cada widget
            widget.destroy()

    def voltar_menu_inicial(self):
        pass

    def create_widgets(self):
        tk.Label(self, text="Bem-vindo à WEB TECHNOMUSIC!").pack(pady=10)
        tk.Button(self, text="Login", command=self.tela_login).pack(pady=5)
        tk.Button(self, text="Cadastrar Funcionário", command=self.tela_cadastro_funcionario).pack(pady=5)
        tk.Button(self, text="Cadastrar Cliente", command=self.tela_cadastro_cliente).pack(pady=5)
        tk.Button(self, text="Buscar Produto", command=self.tela_buscar_produto).pack(pady=5)
        tk.Button(self, text="Sair", command=self.quit).pack(pady=5)

    def tela_login(self):
        self.clear_widgets()
        tk.Label(self, text="Login").pack(pady=10)
        tk.Label(self, text="Apelido").pack()
        self.apelido_entry = tk.Entry(self)
        self.apelido_entry.pack()
        tk.Label(self, text="Senha").pack()
        self.senha_entry = tk.Entry(self, show='*')
        self.senha_entry.pack()
        tk.Button(self, text="Login", command=self.fazer_login).pack(pady=5)
        tk.Button(self, text="Voltar", command=self.voltar_menu_inicial).pack(pady=5)

    def fazer_login(self):
        apelido = self.apelido_entry.get()
        senha = self.senha_entry.get()
        con = conectar_bd()
        cursor = con.cursor()
        cursor.execute("SELECT * FROM clientes WHERE apelido = %s AND senha = %s", (apelido, senha))
        cliente = cursor.fetchone()
        cursor.execute("SELECT * FROM funcionarios WHERE apelido = %s AND senha = %s", (apelido, senha))
        funcionario = cursor.fetchone()
        con.close()

        if cliente:
            self.usuario_logado = Cliente(*cliente[:-1])  # Assumindo que a última coluna é o endereço
            self.usuario_logado.endereco = cliente[-1]
            messagebox.showinfo("Sucesso", f"Bem-vindo, {self.usuario_logado.nome}!")
            self.show_menu_usuario()
        elif funcionario:
            self.usuario_logado = Funcionario(*funcionario)
            messagebox.showinfo("Sucesso", f"Bem-vindo, {self.usuario_logado.nome}!")
            self.show_menu_usuario()
        else:
            messagebox.showwarning("Erro", "Usuário ou senha inválidos. Por favor, tente novamente.")

    def tela_cadastro_funcionario(self):
        self.clear_widgets()
        tk.Label(self, text="Cadastro de Funcionário").pack(pady=10)
        campos = ["Nome", "Apelido", "Cargo", "Senha", "RG", "CPF", "Telefone"]
        self.entradas = {campo: tk.Entry(self) for campo in campos}
        for campo, entrada in self.entradas.items():
            tk.Label(self, text=campo).pack()
            entrada.pack()
        tk.Button(self, text="Cadastrar", command=self.cadastrar_funcionario).pack(pady=5)
        tk.Button(self, text="Voltar", command=self.voltar_menu_inicial).pack(pady=5)

    def cadastrar_funcionario(self):
        dados = {campo: entrada.get() for campo, entrada in self.entradas.items()}
        if valida(dados["CPF"]):
            con = conectar_bd()
            cursor = con.cursor()
            cursor.execute(
                "INSERT INTO funcionarios (nome, apelido, cargo, senha, rg, cpf, telefone) VALUES (%s, %s, %s, %s, %s, %s, %s)",
                (dados["Nome"], dados["Apelido"], dados["Cargo"], dados["Senha"], dados["RG"], dados["CPF"], dados["Telefone"])
            )
            con.commit()
            con.close()
            messagebox.showinfo("Sucesso", "Funcionário cadastrado com sucesso")
        else:
            messagebox.showwarning("Erro", "CPF inválido.")

    def tela_cadastro_cliente(self):
        self.clear_widgets()
        tk.Label(self, text="Cadastro de Cliente").pack(pady=10)
        campos = ["Nome", "RG", "CPF", "Telefone", "Apelido", "Senha", "Endereço"]
        self.entradas = {campo: tk.Entry(self) for campo in campos}
        for campo, entrada in self.entradas.items():
            tk.Label(self, text=campo).pack()
            entrada.pack()
        tk.Button(self, text="Cadastrar", command=self.cadastrar_cliente).pack(pady=5)
        tk.Button(self, text="Voltar", command=self.voltar_menu_inicial).pack(pady=5)

    def cadastrar_cliente(self):
        dados = {campo: entrada.get() for campo, entrada in self.entradas.items()}
        if valida(dados["CPF"]):
            con = conectar_bd()
            cursor = con.cursor()
            cursor.execute(
                "INSERT INTO clientes (nome, rg, cpf, telefone, apelido, senha, endereco) VALUES (%s, %s, %s, %s, %s, %s, %s)",
                (dados["Nome"], dados["RG"], dados["CPF"], dados["Telefone"], dados["Apelido"], dados["Senha"],
                 dados["Endereço"])
            )
            con.commit()
            con.close()
            messagebox.showinfo("Sucesso", "Cliente cadastrado com sucesso")
        else:
            messagebox.showwarning("Erro", "CPF inválido.")

    def tela_buscar_produto(self):
        self.clear_widgets()
        tk.Label(self, text="Buscar Produto").pack(pady=10)
        tk.Label(self, text="Nome do Produto").pack()
        self.nome_produto_entry = tk.Entry(self)
        self.nome_produto_entry.pack()
        tk.Button(self, text="Buscar", command=self.buscar_produto_e_ver_descricao).pack(pady=5)
        tk.Button(self, text="Voltar", command=self.voltar_menu_inicial).pack(pady=5)

    def buscar_produto_e_ver_descricao(self):
        nome_produto = self.nome_produto_entry.get()
        con = conectar_bd()
        cursor = con.cursor()
        cursor.execute("SELECT * FROM produtos WHERE nome = %s", (nome_produto,))
        produto = cursor.fetchone()
        con.close()

        if produto:
            produto_obj = Produto(*produto)
            messagebox.showinfo("Produto Encontrado", produto_obj.exibir_detalhes())
        else:
            messagebox.showwarning("Erro", "Produto não encontrado.")

    def show_menu_usuario(self):
        self.clear_widgets()
        if isinstance(self.usuario_logado, Cliente):
            self.menu_cliente()
        elif isinstance(self.usuario_logado, Funcionario):
            self.menu_funcionario()

    def menu_cliente(self):
        tk.Label(self, text=f"Bem-vindo, {self.usuario_logado.nome}!").pack(pady=10)
        tk.Button(self, text="Realizar Pedido", command=self.realizar_pedido_cliente).pack(pady=5)
        tk.Button(self, text="Alterar Endereço", command=self.alterar_endereco_cliente).pack(pady=5)
        tk.Button(self, text="Adicionar Produto no Carrinho", command=self.adicionar_produto_carrinho).pack(pady=5)
        tk.Button(self, text="Buscar Produto", command=self.tela_buscar_produto).pack(pady=5)
        tk.Button(self, text="Sair", command=self.voltar_menu_inicial).pack(pady=5)

    def menu_funcionario(self):
        tk.Label(self, text=f"Bem-vindo, {self.usuario_logado.nome}!").pack(pady=10)
        tk.Button(self, text="Cadastrar Produto", command=self.tela_cadastro_produto).pack(pady=5)
        tk.Button(self, text="Ver Produtos Cadastrados", command=self.ver_produtos_cadastrados).pack(pady=5)
        tk.Button(self, text="Realizar Entrega", command=self.realizar_entrega).pack(pady=5)
        tk.Button(self, text="Buscar Cliente", command=self.buscar_cliente).pack(pady=5)
        tk.Button(self, text="Buscar Funcionário", command=self.buscar_funcionario).pack(pady=5)
        tk.Button(self, text="Sair", command=self.voltar_menu_inicial).pack(pady=5)

    def adicionar_produto_carrinho(self):
        self.clear_widgets()
        tk.Label(self, text="Adicionar Produto no Carrinho").pack(pady=10)
        tk.Label(self, text="Nome do Produto").pack()
        self.nome_produto_entry = tk.Entry(self)
        self.nome_produto_entry.pack()
        tk.Label(self, text="Quantidade").pack()
        self.quantidade_entry = tk.Entry(self)
        self.quantidade_entry.pack()
        tk.Button(self, text="Adicionar", command=self.adicionar_ao_pedido).pack(pady=5)
        tk.Button(self, text="Voltar", command=self.menu_cliente).pack(pady=5)

    def adicionar_ao_pedido(self):
        nome_produto = self.nome_produto_entry.get()
        quantidade = int(self.quantidade_entry.get())

        con = conectar_bd()
        cursor = con.cursor()
        cursor.execute("SELECT * FROM produtos WHERE nome = %s", (nome_produto,))
        produto = cursor.fetchone()
        con.close()

        if produto:
            produto_obj = Produto(*produto)
            if self.pedido_atual is None:
                self.pedido_atual = Pedido()
            self.pedido_atual.adicionar_produto(produto_obj, quantidade)
        else:
            messagebox.showwarning("Erro", "Produto não encontrado.")

    def realizar_pedido_cliente(self):
        self.clear_widgets()
        tk.Label(self, text="Realizar Pedido").pack(pady=10)
        tk.Label(self, text="Forma de Pagamento (dinheiro/cartao)").pack()
        self.pagamento_entry = tk.Entry(self)
        self.pagamento_entry.pack()
        tk.Button(self, text="Finalizar Pedido", command=self.finalizar_pedido).pack(pady=5)
        tk.Button(self, text="Voltar", command=self.menu_cliente).pack(pady=5)

    def finalizar_pedido(self):
        forma_pagamento = self.pagamento_entry.get()
        if self.pedido_atual:
            self.pedido_atual.selecionar_forma_pagamento(forma_pagamento)
            self.pedido_atual.realizar_pagamento()
            self.pedido_atual = None
        else:
            messagebox.showwarning("Erro", "Nenhum pedido em andamento.")

    def alterar_endereco_cliente(self):
        self.clear_widgets()
        tk.Label(self, text="Alterar Endereço").pack(pady=10)
        tk.Label(self, text="Novo Endereço").pack()
        self.endereco_entry = tk.Entry(self)
        self.endereco_entry.pack()
        tk.Button(self, text="Alterar", command=self.alterar_endereco).pack(pady=5)
        tk.Button(self, text="Voltar", command=self.menu_cliente).pack(pady=5)

    def alterar_endereco(self):
        novo_endereco = self.endereco_entry.get()
        self.usuario_logado.alterar_endereco(novo_endereco)

    def tela_cadastro_produto(self):
        self.clear_widgets()
        tk.Label(self, text="Cadastro de Produto").pack(pady=10)
        campos = ["ID do Produto", "Nome", "Preço", "Descrição", "Tipo", "Marca", "Categoria", "Quantidade"]
        self.entradas = {campo: tk.Entry(self) for campo in campos}
        for campo, entrada in self.entradas.items():
            tk.Label(self, text=campo).pack()
            entrada.pack()
        tk.Button(self, text="Cadastrar", command=self.cadastrar_produto).pack(pady=5)
        tk.Button(self, text="Voltar", command=self.menu_funcionario).pack(pady=5)

    def cadastrar_produto(self):
        dados = {campo: entrada.get() for campo, entrada in self.entradas.items()}
        try:
            preco = float(dados["Preço"])
            quantidade = int(dados["Quantidade"])
            con = conectar_bd()
            cursor = con.cursor()
            cursor.execute(
                "INSERT INTO produtos (id_produto, nome, preco, descricao, tipo, marca, categoria, quantidade) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)",
                (dados["ID do Produto"], dados["Nome"], preco, dados["Descrição"], dados["Tipo"], dados["Marca"],
                 dados["Categoria"], quantidade)
            )
            con.commit()
            con.close()
            messagebox.showinfo("Sucesso", "Produto cadastrado com sucesso")
        except ValueError:
            messagebox.showwarning("Erro", "Preço ou Quantidade inválidos.")

    def realizar_entrega(self):
        messagebox.showinfo("Entrega", "Realizando entrega...")
        # Simulação de tempo para entrega
        self.after(2000, lambda: messagebox.showinfo("Sucesso", "Entrega realizada com sucesso!"))

    def buscar_cliente(self):
        self.clear_widgets()
        tk.Label(self, text="Buscar Cliente").pack(pady=10)
        tk.Label(self, text="Nome do Cliente").pack()
        self.nome_cliente_entry = tk.Entry(self)
        self.nome_cliente_entry.pack()
        tk.Button(self, text="Buscar", command=self.buscar_cliente_por_nome).pack(pady=5)
        tk.Button(self, text="Voltar", command=self.menu_funcionario).pack(pady=5)

    def buscar_cliente_por_nome(self):
        nome_cliente = self.nome_cliente_entry
        nome_cliente = self.nome_cliente_entry.get()
        con = conectar_bd()
        cursor = con.cursor()
        cursor.execute("SELECT * FROM clientes WHERE nome = %s", (nome_cliente,))
        cliente = cursor.fetchone()
        con.close()

        if cliente:
            cliente_obj = Cliente(*cliente)
            messagebox.showinfo("Cliente Encontrado",
                                f"Cliente encontrado: {cliente_obj.nome}\nEmail: {cliente_obj.email}\nEndereço: {cliente_obj.endereco}")
        else:
            messagebox.showwarning("Erro", "Cliente não encontrado.")

    def buscar_funcionario(self):
        self.clear_widgets()
        tk.Label(self, text="Buscar Funcionário").pack(pady=10)
        tk.Label(self, text="Nome do Funcionário").pack()
        self.nome_funcionario_entry = tk.Entry(self)
        self.nome_funcionario_entry.pack()
        tk.Button(self, text="Buscar", command=self.buscar_funcionario_por_nome).pack(pady=5)
        tk.Button(self, text="Voltar", command=self.menu_funcionario).pack(pady=5)

    def buscar_funcionario_por_nome(self):
        nome_funcionario = self.nome_funcionario_entry.get()
        con = conectar_bd()
        cursor = con.cursor()
        cursor.execute("SELECT * FROM funcionarios WHERE nome = %s", (nome_funcionario,))
        funcionario = cursor.fetchone()
        con.close()

        if funcionario:
            funcionario_obj = Funcionario(*funcionario)
            messagebox.showinfo("Funcionário Encontrado",
                                f"Funcionário encontrado: {funcionario_obj.nome}\nEmail: {funcionario_obj.email}\nCargo: {funcionario_obj.cargo}")
        else:
            messagebox.showwarning("Erro", "Funcionário não encontrado.")

    def ver_produtos_cadastrados(self):
        self.clear_widgets()
        tk.Label(self, text="Produtos Cadastrados").pack(pady=10)
        con = conectar_bd()
        cursor = con.cursor()
        cursor.execute("SELECT * FROM produtos")
        produtos = cursor.fetchall()
        con.close()

        produtos_lista = "\n".join(
            [f"{produto[1]} - R${produto[2]:.2f} - Quantidade: {produto[7]}" for produto in produtos])
        tk.Label(self, text=produtos_lista).pack(pady=10)
        tk.Button(self, text="Voltar", command=self.menu_funcionario).pack(pady=5)

    def conectar_bd():
        import mysql.connector

        # Conectar ao banco de dados
        con = mysql.connector.connect(
            host="loja",
            user="s",
            password="",
            database="loja"
        )
        return con

if __name__ == '__main__':
    app = App()
    app.mainloop()


